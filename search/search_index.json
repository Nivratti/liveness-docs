{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Passive Face Liveness Verification Solution","text":"<p>Welcome to the official page for our Passive Face Liveness Verification Solution! This solution leverages AI and computer vision techniques to ensure secure and frictionless identity verification.</p>"},{"location":"#overview","title":"Overview","text":"<p>Passive face liveness verification determines whether a face presented to the camera is real (from a live person) or fake (such as a photo, video, or mask) without requiring any user action. This solution is ideal for seamless user onboarding, enhancing security, and reducing fraud in industries like banking, fintech, telecom, and e-commerce.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Non-Intrusive Verification: Users don't need to perform any specific actions or gestures.</li> <li>AI-Powered Detection: Utilizes deep learning models to detect spoofing attempts.</li> <li>Real-Time Processing: Fast and efficient verification, suitable for high-traffic systems.</li> <li>Device Agnostic: Compatible with smartphones, webcams, and other camera devices.</li> <li>High Accuracy: Robust against various spoofing techniques like photos, videos, and 3D masks.</li> </ul>"},{"location":"#benefits","title":"Benefits","text":"<ul> <li>Enhanced Security: Prevents fraudulent access using spoofing techniques.</li> <li>User-Friendly: Seamless verification process without interrupting user experience.</li> <li>Cost-Effective: Reduces manual verification efforts and fraud-related losses.</li> <li>Scalable Solution: Handles high volumes of verification requests.</li> </ul>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li>Capture: A face image is captured through the user's device.</li> <li>Preprocessing: The captured data is analyzed and preprocessed to ensure quality and compatibility.</li> <li>AI Analysis: Deep learning algorithms evaluate the input to detect signs of liveness or spoofing.</li> <li>Result: A liveness score is generated, indicating whether the face is genuine or fake.</li> </ol>"},{"location":"#example-spoof-attacks","title":"Example Spoof Attacks","text":""},{"location":"#1-printed-photo-spoof","title":"1. Printed Photo Spoof","text":""},{"location":"#2-screen-replay-attack","title":"2. Screen Replay Attack","text":""},{"location":"#3-printed-photo-with-cut-out-eyes-nose-mouth","title":"3. Printed Photo with Cut-Out Eyes, Nose &amp; Mouth","text":""},{"location":"#4-tablet-replay-attack","title":"4. Tablet Replay Attack","text":""},{"location":"#use-cases","title":"Use Cases","text":"<p>Face liveness verification has become a critical solution across industries to enhance security,  improve operational efficiency, and deliver seamless user experiences. By leveraging advanced  AI and biometric technologies, it ensures that the person behind an interaction is physically  present and not using fraudulent methods like photos, videos, or masks. Industries such as  Banks, Finetech, government, education, telecom, insurance, travel, hospitality, e-commerce,  and more benefit significantly from implementing liveness verification in their processes.</p> <p>Whether it's enabling secure digital onboarding, preventing identity fraud, authenticating remote users,  or streamlining customer interactions, liveness verification addresses modern challenges while building  trust and compliance. Below are detailed use cases tailored to specific industries to help businesses  understand how to integrate and benefit from this innovative technology.</p>"},{"location":"#1-financial-servicesbanks-finetech","title":"1) Financial Services(Banks, finetech):","text":""},{"location":"#i-digital-onboarding-kyc-compliance","title":"i) Digital Onboarding &amp; KYC Compliance:","text":"<p>Banks and fintech companies can use our liveness solution to authenticate customers during  account opening, ensuring only real users create accounts.</p> <p>Example: A banking app integrates our solution to match a selfie with an uploaded ID  document and verify that the person is physically present, reducing fake account creation by fraudsters.</p>"},{"location":"#ii-fraud-prevention-in-transactions","title":"ii) Fraud Prevention in Transactions:","text":"<p>Payment platforms and banks can implement our liveness solution to secure high-value  transactions by verifying that the account owner is authorizing the activity.</p> <p>Example: A digital wallet provider integrates liveness verification for transactions  over a certain limit, preventing unauthorized transfers from hacked accounts.</p>"},{"location":"#iii-loan-approvals","title":"iii) Loan Approvals","text":"<p>Lenders can use our liveness solution to authenticate borrowers before loan disbursement,  minimizing fraud risks and identity theft.</p>"},{"location":"#2-government-and-public-sector","title":"2) Government and Public Sector","text":""},{"location":"#i-border-control-and-immigration","title":"i) Border Control and Immigration:","text":"<p>Immigration and customs departments can use our liveness solution to enhance security and streamline traveler verification.</p> <p>Example: Automated kiosks at international airports scan traveler's faces and perform liveness checks to confirm their identities before allowing entry, reducing delays and enhancing security.</p>"},{"location":"#ii-digital-identity-programs","title":"ii) Digital Identity Programs:","text":"<p>Governments can use our liveness solution to enhance digital identity systems by ensuring that registered citizens or residents are real individuals and not fraudsters.</p>"},{"location":"#iii-social-welfare-distribution","title":"iii) Social Welfare Distribution","text":"<p>Government agencies can deploy our liveness solution to authenticate beneficiaries and prevent misuse of welfare schemes.</p>"},{"location":"#3-education-sector","title":"3) Education Sector:","text":""},{"location":"#i-student-attendance-systems","title":"i) Student Attendance Systems:","text":"<p>Schools and universities can adopt our liveness solution to automate attendance tracking and ensure accuracy.</p>"},{"location":"#ii-remote-exam-proctoring","title":"ii) Remote Exam Proctoring:","text":"<p>Educational institutions and e-learning platforms can use our liveness solution to verify students' identities during online exams, ensuring integrity and preventing cheating.</p>"},{"location":"#4-insurance","title":"4) Insurance:","text":""},{"location":"#i-policy-issuance-and-fraud-prevention","title":"i) Policy Issuance and Fraud Prevention:","text":"<p>Insurance companies can use our liveness solution to verify customers identities during policy issuance and prevent fraudulent applications.</p>"},{"location":"#ii-claim-processing-and-beneficiary-verification","title":"ii) Claim Processing and Beneficiary Verification:","text":"<p>Insurers can adopt our liveness solution to authenticate claimants and beneficiaries before approving payouts, ensuring security and reducing fraud.</p>"},{"location":"#5-travel-and-hospitality","title":"5) Travel and Hospitality:","text":""},{"location":"#i-airport-security-and-immigration","title":"i) Airport Security and Immigration:","text":"<p>Airports and border control agencies can implement our liveness solution to enhance traveler authentication at security checkpoints and immigration.</p> <p>Example: Automated kiosks at airports use liveness verification to confirm travelers identities against their passports, reducing queues and improving security.</p>"},{"location":"#ii-secure-and-contactless-check-ins","title":"ii) Secure and Contactless Check-Ins:","text":"<p>Hotels and airlines can use our liveness solution to streamline check-ins, ensuring secure and contactless authentication for travelers.</p> <p>Example: A hotel allows guests to check in by scanning their faces with liveness detection, eliminating the need for physical documents or waiting at the reception desk.</p>"},{"location":"#contact","title":"Contact","text":"<p>For inquiries or support, please contact us:</p> <ul> <li>Email: boyanenivratti@gmail.com</li> </ul> <p>Thank you for exploring our Passive Face Liveness Verification Solution! Together, let's build a more secure and seamless digital world.</p>"},{"location":"build_liveness/","title":"Build liveness","text":"<p>This tutorial will guide you to how to build liveness sdk.</p> <p>We have used Crow framework to serve liveness models..</p>"},{"location":"build_liveness/#steps","title":"Steps:","text":""},{"location":"build_liveness/#1-extract-liveness-sdk","title":"1. Extract liveness sdk:","text":"<p>Unzip sdk file.</p> <pre><code>$ unzip liveness.zip\n</code></pre>"},{"location":"build_liveness/#2-move-inside-root-sdk-folder","title":"2. Move inside root sdk folder:","text":"<p>Change your working directory to <code>liveness/engine/cpp</code> folder.</p> <pre><code>$ cd liveness/engine/cpp\n</code></pre>"},{"location":"build_liveness/#3-compile-code","title":"3. Compile code:","text":"<pre><code>$ mkdir -p build\n$ cd build\n$ cmake ..\n$ make -j$(nproc)\n</code></pre> <p>This will generate binary file named 'liveness_api' file inside current build folder.</p>"},{"location":"download-models/","title":"Download models","text":"<p>Download neural network models from google drive before starting using liveness prediction.</p> <p>I have two ways to download models in easy way. You can choose any method.</p>"},{"location":"download-models/#option-1-bash-script","title":"Option 1. Bash script:","text":"<p>Download trained neural network models by using bash script. Move inside directory where download_models.sh located and then run</p> <pre><code>$ ./download_models.sh\n</code></pre>"},{"location":"download-models/#option-2-using-python-script","title":"Option 2. Using python script:","text":"<p>Download trained neural network models by using python script. </p> <p>First you need to install gdown package.</p> <pre><code>$ pip3 install gdown\n</code></pre> <p>Move inside directory where download_models.py located and then run.</p> <pre><code>$ python3 download_models.py\n</code></pre> <p>After downloading models you can use liveness prediction sdk interface.</p>"},{"location":"generating-shared-library/","title":"Generating shared library","text":"<p>This tutorial will guide you to generate shared library from liveness lib phphcpp sdk(c++).</p> <p>The 'liveness_lib_phpcpp' code is a wrapper code around crow server. </p>"},{"location":"generating-shared-library/#steps","title":"Steps:","text":""},{"location":"generating-shared-library/#1-extract-liveness-lib-sdk","title":"1. Extract liveness lib sdk:","text":"<p>Unzip zipped sdk file.</p> <pre><code>$ unzip liveness_lib_phpcpp.zip\n</code></pre>"},{"location":"generating-shared-library/#2-move-inside-root-sdk-folder","title":"2. Move inside root sdk folder:","text":"<p>Change your working directory to <code>liveness_lib_phpcpp</code> folder.</p> <pre><code>$ cd liveness_lib_phpcpp\n</code></pre>"},{"location":"generating-shared-library/#3-generate-so-file","title":"3. Generate .so file:","text":"<pre><code>$ mkdir -p build\n$ cd build\n$ cmake ..\n$ make -j$(nproc)\n</code></pre> <p>This will generate .so file named 'libliveness.so' file inside current build folder.</p>"},{"location":"how-to-update/","title":"how to update liveness","text":"<p>This doc will guide you to how to update liveness models and other files on server.</p>"},{"location":"how-to-update/#steps","title":"Steps:","text":""},{"location":"how-to-update/#1-stop-liveness-systemd-service","title":"1. Stop liveness systemd service:","text":"<p>Before updating liveness models stop liveness service first.</p> <pre><code>$ sudo systemctl stop liveness_api\n</code></pre> <p>and you can check stopped status by running command</p> <pre><code>$ sudo systemctl status liveness_api\n</code></pre>"},{"location":"how-to-update/#2-update-models","title":"2. Update models:","text":"<p>Put updated liveness models inside folder <code>/usr/share/face_recognition/models/liveness/</code></p>"},{"location":"how-to-update/#3-update-liveness_api-binary-file","title":"3. Update 'liveness_api' binary file :","text":"<p>If you made changes in code, then you can re-build liveness on local system and you can upload newly generated binary files to server.</p> <ol> <li> <p>Rebuild code on local system</p> </li> <li> <p>Replace existing binary files on server by uploading  generated binary file <code>liveness_api</code> to server inside folder <code>/opt/liveness_serve/</code>.</p> </li> </ol>"},{"location":"how-to-update/#4-start-liveness-systemd-service","title":"4. Start liveness systemd service:","text":"<p>After updating liveness you can now start liveness service.</p> <pre><code>$ sudo systemctl start liveness_api\n</code></pre> <p>and you can check status by running command</p> <pre><code>$ sudo systemctl status liveness_api\n</code></pre>"},{"location":"serve_liveness/","title":"Serve liveness","text":"<p>This tutorial will guide you to how to serve liveness sdk.</p>"},{"location":"serve_liveness/#steps","title":"Steps:","text":""},{"location":"serve_liveness/#1-copy-liveness_api-binary-file","title":"1. Copy \"liveness_api\" binary file:","text":"<p>After building liveness sdk it will generate 'liveness_api' binary file. Copy that file inside folder /opt/liveness_serve/</p> <pre><code>$ mkdir -p /opt/liveness_serve/\n$ cp liveness_api /opt/liveness_serve/\n</code></pre>"},{"location":"serve_liveness/#2-write-systemd-service-file","title":"2. Write systemd service file:","text":"<p>To run liveness sdk in background, we need to add it as systemd service.</p> <p>Copy below code, replace username and group-name with actual values and save it as liveness_api.service</p> <pre><code>[Unit]\n# service description\nDescription=Liveness crow api server\nAfter=syslog.target\n\n[Service]\nType=simple\n\n# user and group -- to run service\nUser=user_name\nGroup=group_name\n\n# project working directory\nWorkingDirectory=/opt/liveness_serve\n\n# Command to execute when the service is started\n## absolute path to liveness model serving\nExecStart=/opt/liveness_serve/liveness_api\n\n# Automatically restart the service if it crashes\nRestart=on-failure\n\n# service shows up immediately in systemd's logs\nStandardOutput=syslog\nStandardError=syslog\n\n[Install]\n# Tell systemd to automatically start this service when the system boots\n# (assuming the service is enabled)\nWantedBy=multi-user.target\n</code></pre>"},{"location":"serve_liveness/#3-add-liveness-as-systemd-service","title":"3. Add liveness as systemd service:","text":"<p>Place liveness_api.service file inside /etc/systemd/system/ folder. And reload systemd demaon.</p> <pre><code>$ sudo cp liveness_api.service /etc/systemd/system/\n$ sudo systemctl daemon-reload\n</code></pre> <p>After putting liveness service file in systemd folder and running <code>sudo systemctl daemon-reload</code> command, liveness service will be started, no need to run <code>sudo systemctl start liveness_api</code> command.</p> <ul> <li>After that you are able to use systemd apis such as<ul> <li>systemctl start liveness_api</li> <li>systemctl status liveness_api</li> <li>systemctl stop liveness_api</li> <li>systemctl restart liveness_api</li> </ul> </li> </ul>"},{"location":"serve_liveness/#4-auto-start-liveness-service-on-system-boot","title":"4. Auto start liveness service on system boot:","text":"<p>Enable liveness service to start automatically at system boot.</p> <pre><code>$ systemctl --user enable liveness_api\n</code></pre>"},{"location":"serve_liveness/#5-check-liveness-status","title":"5. Check liveness status:","text":"<p>To check liveness server status.</p> <pre><code>$ systemctl status liveness_api\n</code></pre>"},{"location":"test-liveness/","title":"Test Liveness","text":"<p>Liveness sdk provides interface to verify liveness, perform face match, detect age and gender of person.</p>"},{"location":"test-liveness/#1-verify-liveness","title":"1. Verify liveness:","text":"<p>To test liveness sdk provides interface named <code>verify_liveness</code>.</p> <pre><code>&lt;?php\n\n$result = verify_liveness('images/test.png');\n\necho \"Liveness result: \\n\";\nprint_r($result);\n?&gt;\n</code></pre> <p>It takes one parameter as path to input image.</p>"},{"location":"using-shared-library/","title":"Use shared library","text":"<p>To use generated shared library we need to put it inside php configuration folder.</p>"},{"location":"using-shared-library/#1-get-php-extension-directory","title":"1. Get php extension directory:","text":"<pre><code>$ php -i | grep extension_dir\n</code></pre>"},{"location":"using-shared-library/#2-copy-generated-liveness-sdk-shared-libraryso-file","title":"2. Copy generated liveness sdk shared library(.so) file :","text":"<p>Replace \"/php/extension_dir/path\" text with actual path obtained from step 1.</p> <pre><code>$ cp /path/to/libliveness.so /php/extension_dir/path\n</code></pre>"},{"location":"using-shared-library/#3-get-php-configuration-folderconfd","title":"3. Get php configuration folder(conf.d) :","text":"<p>Get path of php.ini on your system. the parent folder of 'php.ini' contains 'conf.d' folder</p> <pre><code>$ php -i | grep 'Configuration File'\n</code></pre>"},{"location":"using-shared-library/#4-copy-livenessini-file","title":"4. Copy liveness.ini file :","text":"<p>The file liveness.ini located inside 'liveness_lib_phpcpp' folder.</p> <p>Replace \"/php/configuration/folder/path\" text with actual path obtained from step 3.</p> <pre><code>$ cp /path/to/liveness.ini/file /php/config/folder/path\n</code></pre> <p>Example:</p> <pre><code>$ sudo cp /home/nivratti/liveness_lib_phpcpp/liveness.ini  /etc/php/7.2/cli/conf.d/\n</code></pre>"},{"location":"installation/centos/","title":"intro","text":""},{"location":"installation/centos/intro/","title":"intro","text":""},{"location":"installation/centos/opencv/","title":"opencv","text":"<p>The OpenCV package is available from the CentOS 7 standard repositories, but is it pretty outdated. We need to install the latest stable version of OpenCV with dnn module.</p>"},{"location":"installation/centos/opencv/#required-versions","title":"Required versions:","text":"<ul> <li>Openncv 4.4.0 or greater</li> <li>gcc with c++11 support</li> <li>cmake &gt;= 3.15</li> <li>make</li> </ul>"},{"location":"installation/centos/opencv/#steps","title":"Steps:","text":"<p>To install the latest OpenCV version from the source, follow these steps:</p>"},{"location":"installation/centos/opencv/#1-setup-folder-to-process-opencv-installation","title":"1. Setup folder to process opencv installation:","text":"<p>We are going to  create installation directory.</p> <pre><code>$ cvVersion=\"master\"\n\n$ rm -rf opencv\n$ rm -rf opencv_contrib\n\n$ mkdir installation\n$ mkdir installation/OpenCV-\"$cvVersion\"\n</code></pre> <p>Finally, we will be storing the current working directory in cwd variable. We are also going to refer to this directory as OpenCV_Home_Dir .</p> <pre><code>$ cwd=$(pwd)\n</code></pre>"},{"location":"installation/centos/opencv/#2-install-packages","title":"2. Install packages","text":"<p>Next we are going to install libraries and packages that will be required for OpenCV installation.</p> <pre><code>$ sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n$ sudo yum -y install epel-release\n$ sudo yum -y install git gcc gcc-c++ cmake3\n$ sudo yum -y install qt5-qtbase-devel\n$ sudo yum install -y python34 python34-devel python34-pip\n$ sudo yum install -y python python-devel python-pip\n\n$ sudo yum -y install python-devel numpy python34-numpy\n$ sudo yum -y install gtk2-devel\n\n$ sudo rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\n$ sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\n$ sudo yum install -y ffmpeg\n$ sudo yum install -y ffmpeg-devel\n\n$ sudo yum install -y libpng-devel\n$ sudo yum install -y openexr-devel\n$ sudo yum install -y libwebp-devel\n$ sudo yum -y install libjpeg-turbo-devel \n$ sudo yum install -y freeglut-devel mesa-libGL mesa-libGL-devel\n$ sudo yum -y install libtiff-devel \n$ sudo yum -y install libdc1394-devel --skip-broken\n$ sudo yum -y install tbb-devel eigen3-devel\n$ sudo yum -y install boost boost-thread boost-devel\n</code></pre>"},{"location":"installation/centos/opencv/#3-clone-github-repositories","title":"3. Clone GitHub Repositories","text":"<p>We will next clone opencv and opencv_contrib GitHub repositories.</p> <pre><code>$ git clone https://github.com/opencv/opencv.git\n$ cd opencv\n$ git checkout $cvVersion\n$ cd ..\n\n$ git clone https://github.com/opencv/opencv_contrib.git\n$ cd opencv_contrib\n$ git checkout $cvVersion\n$ cd ..\n</code></pre>"},{"location":"installation/centos/opencv/#4-build-opencv","title":"4. Build OpenCV","text":"<p>Now comes the part we have been so eagerly waiting for \u2013 building OpenCV. First, we will create build directory.</p> <pre><code>$ cd opencv\n$ mkdir build\n$ cd build\n</code></pre> <p>Next, we will use CMake and make to build OpenCV.</p> <pre><code>$ cmake3 -D CMAKE_BUILD_TYPE=RELEASE \\\n-D CMAKE_INSTALL_PREFIX=/usr/local \\\n-D INSTALL_C_EXAMPLES=ON \\\n-D OPENCV_GENERATE_PKGCONFIG=ON \\\n-D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \\\n-D ENABLE_CXX11=ON \\\n-D BUILD_EXAMPLES=ON ..\n\n$ make -j$(nproc)\n$ make install\n\n$ cd $cwd\n</code></pre>"},{"location":"installation/centos/phpcpp/","title":"phpcpp","text":"<p>The PHP-CPP library is a C++ library for developing PHP extensions. It offers a collection of well documented and easy-to-use classes that can be used and extended to build native extensions for PHP. The full documentation can be found on http://www.php-cpp.com.</p>"},{"location":"installation/centos/phpcpp/#required-versions","title":"Required versions:","text":"<ul> <li>php &gt;= 7.1</li> <li>gcc with c++11 support</li> <li>cmake &gt;= 3.15</li> <li>make</li> </ul>"},{"location":"installation/centos/phpcpp/#steps","title":"Steps:","text":"<p>To install the latest phpcpp, follow these steps:</p>"},{"location":"installation/centos/phpcpp/#1-install-gcc-8","title":"1) install GCC 8:","text":"<p>First check installed gcc version using command <code>$ gcc --version</code>. If it's less than 8 follow below steps.</p> <pre><code>$ sudo yum update\n$ yum install devtoolset-8-gcc devtoolset-8-gcc-c++\n$ source scl_source enable devtoolset-8\n$ scl enable devtoolset-8 -- bash\n</code></pre>"},{"location":"installation/centos/phpcpp/#2-clean-older-php-versions","title":"2) Clean older php versions:","text":"<p>First check is their any installed php version using command <code>$ php --version</code>. If it's less than 7.1 remove it.</p> <pre><code>$ yum list installed | grep php\n$ yum -y remove php*\n</code></pre>"},{"location":"installation/centos/phpcpp/#3-install-php72","title":"3) Install php7.2:","text":"<pre><code>$ sudo yum install epel-release\n$ sudo yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm\n$ sudo yum install yum-utils\n$ sudo yum-config-manager --enable remi-php72\n$ sudo yum update\n$ sudo yum install php\n</code></pre>"},{"location":"installation/centos/phpcpp/#4-install-php-devel","title":"4) Install php -devel:","text":"<pre><code>$ yum install php-devel\n</code></pre>"},{"location":"installation/centos/phpcpp/#5-install-php-cpp","title":"5) Install PHP-CPP:","text":"<pre><code>$ git clone https://github.com/CopernicaMarketingSoftware/PHP-CPP.git\n$ make\n$ sudo make install\n</code></pre>"},{"location":"installation/ubuntu/opencv/","title":"opencv","text":"<p>Install latest opencv package with dnn support.</p>"},{"location":"installation/ubuntu/opencv/#required-versions","title":"Required versions:","text":"<ul> <li>Openncv 4.4.0 or greater</li> <li>gcc with c++11 support</li> <li>cmake &gt;= 3.15</li> <li>make</li> </ul> <p>To install the latest OpenCV version from the source on ubuntu, follow these steps:</p>"},{"location":"installation/ubuntu/opencv/#run-bash-script-to-process-opencv-installation","title":"Run bash script to process opencv installation:","text":"<p>Bash script located under <code>setup/ubuntu-debian</code> folder.</p> <pre><code>$ ./install-opencv.sh\n</code></pre> <p>It will install latest opencv version on ubuntu os.</p>"},{"location":"installation/ubuntu/phpcpp/","title":"phpcpp","text":"<p>The PHP-CPP library is a C++ library for developing PHP extensions. It offers a collection of well documented and easy-to-use classes that can be used and extended to build native extensions for PHP. The full documentation can be found on http://www.php-cpp.com.</p>"},{"location":"installation/ubuntu/phpcpp/#required-versions","title":"Required versions:","text":"<ul> <li>php &gt;= 7.1</li> <li>gcc with c++11 support</li> <li>cmake &gt;= 3.15</li> <li>make</li> </ul>"},{"location":"installation/ubuntu/phpcpp/#steps","title":"Steps:","text":"<p>To install the latest phpcpp, follow these steps:</p>"},{"location":"installation/ubuntu/phpcpp/#1-install-php-devel","title":"1) Install php -devel:","text":"<pre><code>$ sudo apt-get install php-dev\n</code></pre>"},{"location":"installation/ubuntu/phpcpp/#5-install-php-cpp","title":"5) Install PHP-CPP:","text":"<pre><code>$ git clone https://github.com/CopernicaMarketingSoftware/PHP-CPP.git\n$ make\n$ sudo make install\n</code></pre>"}]}